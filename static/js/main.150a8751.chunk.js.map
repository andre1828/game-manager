{"version":3,"sources":["TipoJogo.js","App.js","reportWebVitals.js","index.js"],"names":["TIPO_JOGO","MEGA_SENA","QUINA","App","useState","jogos","setJogos","toString","tipoJogo","setTipoJogo","Date","dataSorteio","setDataSorteio","valorCota","setValorCota","qtdCota","setQtdCota","participantes","setParticipantes","nomeParticipante","setNomeParticipante","ramalParticipante","setRamalParticipante","emailParticipante","setEmailParticipante","route","setRoute","justify","h3","onClick","style","display","y","Container","gap","length","map","jogo","xs","md","shadow","h4","id","toLocaleString","direction","h6","placeholder","value","onChange","Option","label","e","target","type","participante","nome","ramal","email","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.150a8751.chunk.js","sourcesContent":["const TIPO_JOGO = {\n    MEGA_SENA:0,\n    QUINA: 1,\n}\n\nexport default TIPO_JOGO","import TIPO_JOGO from './TipoJogo'\nimport { GeistProvider, CssBaseline, Row } from '@geist-ui/react'\nimport './App.css';\nimport { useState } from 'react'\nimport { Text, Card, Grid, Button, Select, Spacer, Input } from '@geist-ui/react'\n\n\nfunction App() {\n\n  const [jogos, setJogos] = useState([])\n\n  const [tipoJogo, setTipoJogo] = useState(TIPO_JOGO.MEGA_SENA.toString())\n  const [dataSorteio, setDataSorteio] = useState(new Date())\n  const [valorCota, setValorCota] = useState(0)\n  const [qtdCota, setQtdCota] = useState(0)\n\n  const [participantes, setParticipantes] = useState([])\n\n  const [nomeParticipante, setNomeParticipante] = useState('')\n  const [ramalParticipante, setRamalParticipante] = useState('')\n  const [emailParticipante, setEmailParticipante] = useState('')\n\n  const [route, setRoute] = useState('home')\n\n  return <>\n    <GeistProvider>\n      <CssBaseline />\n      <Row justify={'center'} >\n        <Text h3> Gerenciador de jogos</Text>\n      </Row>\n      <Button onClick={() => setRoute('cadastrarJogo')}\n        style={{ display: route === 'home' ? '' : 'none' }}>Criar jogo</Button>\n\n      <Spacer y={2} />\n\n      <Grid.Container gap={2} style={{ display: route === 'home' ? '' : 'none' }}>\n        {jogos.length > 0\n          ? jogos.map(jogo => <Grid xs={24} md={12} justify=\"center\">\n            <Card shadow>\n              <Text h4>Jogo {jogo.id}</Text>\n              <Text h4>Tipo: {jogo.tipoJogo == 0 ? \"Mega Sena\" : \"Quina\"}</Text>\n              <Text h4>Valor da cota: {jogo.valorCota}</Text>\n              <Text h4>Quantidade de cotas: {jogo.qtdCota}</Text>\n              <Text h4>Data do sorteio {jogo.dataSorteio.toLocaleString()}</Text>\n            </Card>\n          </Grid>\n          )\n          : <Grid><Text h4>Nenhum jogo cadastrado</Text></Grid>\n        }\n      </Grid.Container>\n      <Spacer y={5} />\n\n      <Grid.Container direction={'column'} style={{ display: route === 'cadastrarJogo' ? '' : 'none' }}>\n        <Text h4>Cadastrar jogo</Text>\n        <Text h6>Tipo de jogo</Text>\n        <Select placeholder=\"Tipo de jogo\" value={tipoJogo} onChange={setTipoJogo}>\n          <Select.Option value=\"0\">Mega Sena</Select.Option>\n          <Select.Option value=\"1\">Quina</Select.Option>\n        </Select>\n        <Spacer y={.5} />\n        <Input label=\"Valor da cota\" onChange={e => setValorCota(e.target.value)} />\n        <Spacer y={.5} />\n        <Input label=\"Quantidade de cotas\" onChange={e => setQtdCota(e.target.value)} />\n        <Spacer y={.5} />\n        <Input label=\"Data do sorteio\" type=\"date\" onChange={e => setDataSorteio(e.target.value)} />\n        <Spacer y={.5} />\n        <Button onClick={() => {\n          const jogo = {}\n\n          jogo.id = jogos.length\n          jogo.tipoJogo = tipoJogo\n          jogo.valorCota = valorCota\n          jogo.qtdCota = qtdCota\n          jogo.dataSorteio = dataSorteio\n\n          setJogos([...jogos, jogo])\n          setRoute('home')\n        }} >Cadastrar jogo</Button>\n      </Grid.Container>\n\n      <Spacer y={5} />\n\n      <Grid.Container direction={'column'} style={{ display: route === 'cadastrarParticipante' ? '' : 'none' }}>\n\n        <Text h4>Cadastrar Participante</Text>\n        <Spacer y={.5} />\n        <Input label=\"Nome\" onChange={e => setNomeParticipante(e.target.value)} />\n        <Spacer y={.5} />\n        <Input label=\"Ramal\" onChange={e => setRamalParticipante(e.target.value)} />\n        <Spacer y={.5} />\n        <Input label=\"E-mail\" type=\"email\" onChange={e => setEmailParticipante(e.target.value)} />\n        <Spacer y={.5} />\n        <Button onClick={() => {\n          const participante = {}\n\n          participante.nome = nomeParticipante\n          participante.ramal = ramalParticipante\n          participante.email = emailParticipante\n\n          setParticipantes([...participantes, participante])\n          setRoute('home')\n        }}>Cadastrar participante</Button>\n      </Grid.Container>\n\n      <Spacer y={5} />\n\n      <Button onClick={() => setRoute('cadastrarParticipante')}\n        style={{ display: route === 'home' ? '' : 'none' }} >Cadastrar participante</Button>\n      <Grid.Container gap={2} style={{ display: route === 'home' ? '' : 'none' }}>\n        {participantes.map(p => <Grid xs={24} md={12} justify=\"center\">\n          <Card type='success' shadow>\n            <Text h4>Nome: {p.nome}</Text>\n            <Text h4>Ramal: {p.ramal}</Text>\n            <Text h4>E-mail: {p.email}</Text>\n          </Card>\n        </Grid>)}\n      </Grid.Container>\n\n    </GeistProvider>\n  </>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}